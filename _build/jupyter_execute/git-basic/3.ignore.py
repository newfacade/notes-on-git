#!/usr/bin/env python
# coding: utf-8

# # 忽略文件
# 
# 
# ```{note}
# 一般我们总会有些文件无需纳入 Git 的管理，也不希望它们出现在未跟踪列表。通常都是些自动生成的文件，如日志文件。在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。
# ```
# 
# 来看一个实际的 .gitignore 例子：
# 
# ```
# $ cat .gitignore
# *.[oa]
# *~
# ```
# 
# 第一行告诉 Git 忽略所有以 *.o* 和 *.a* 结尾的文件。第二行告诉 Git 忽略所有名字以波浪符 (~) 结尾的文件。
# 
# ```{tip}
# 要养成一开始就为你的新仓库设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。
# ```
# 
# 文件 .gitignore 的格式规范如下：
# 
# * 所有空行或者以 `#` 开头的行都会被 Git 忽略。
# * 可以使用标准的 glob 模式匹配，它会被递归地应用在整个工作区中。
# * 匹配模式可以以 `/` 开头防止递归。
# * 匹配模式可以以 `/` 结尾指定目录。
# * 要忽略指定模式之外的文件或目录，可以在模式前加上叹号 `!` 取反。
# 
# 所谓的 glob 模式是指 shell 所使用的简化了的正则表达式：
# 
# * 星号 `*` 匹配零个或多个任意字符；
# * `[abc]` 匹配任何一个列在方括号中的字符；
# * 问号 `?` 只匹配一个任意字符；
# * 如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 `[0-9]` 表示匹配所有 0 到 9 的数字）；
# * 使用两个星号 `**` 表示匹配任意中间目录，比如 `a/**/z` 可以匹配 `a/z`、`a/b/c/z` 等。
# 
# 例子：
# 
# ```
# # 忽略所有的 .a 文件
# *.a
# 
# # 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件
# !lib.a
# 
# # 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO
# /TODO
# 
# # 忽略任何目录下名为 build 的文件夹
# build/
# 
# # 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt
# doc/*.txt
# 
# # 忽略 doc/ 目录及其所有子目录下的 .pdf 文件
# doc/**/*.pdf
# ```

# In[ ]:




