#!/usr/bin/env python
# coding: utf-8

# # 获取 Git 仓库
# 
# ```{note}
# 通常有两种获取 Git 项目仓库的方式：
# 
# 1. 将尚未进行版本控制的本地目录转换为 Git 目录
# 2. 从其它服务器克隆一个已存在的 Git 仓库
# 
# 两种方式都会在你的本地机器上得到一个工作就绪的 Git 仓库。
# ```

# ## 在已存在目录中初始化仓库
# 
# 先进入该项目目录：
# 
# ```
# $ cd /Users/user/my_project
# ```
# 
# 之后执行：
# 
# ```
# $ git init
# ```
# 
# 该命令将创建一个名为 .git 的子目录，子目录内的文件是 Git 仓库的骨干。但是，这时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。
# 
# 如果在一个已存在文件的文件夹中进行版本控制，你应该开始跟踪这些文件并进行初始提交。可以通过 `git add` 命令来指定需要跟踪的文件：
# 
# ```
# $ git add *.c
# $ git add LICENSE
# $ git commit -m 'initial project version'
# ```
# 
# 现在，你已经得到一个存在被跟踪文件与初始提交的 Git 仓库了。

# ## 克隆现有的仓库
# 
# 如果你想获得一份已经存在了的 Git 仓库的拷贝，这时就要用到 `git clone` 命令。当你执行 `git clone` 命令时，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。
# 
# 克隆仓库的命令是 `git clone <url>`。比如，要克隆 Git 的链接库 libgit2，可以用下面的命令：
# 
# ```
# $ git clone https://github.com/libgit2/libgit2
# ```
# 
# 这会在当前目录下创建一个名为 libgit2 的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下的所有数据会放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。如果你进入到这个新建的 libgit2 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。
# 
# 如果想在克隆远程仓库的时候，自定义本地仓库的名字：
# 
# ```
# $ git clone https://github.com/libgit2/libgit2 mylibgit
# ```
# 
# 这会执行与上一条命令相同的操作，但目标目录变成了 mylibgit。
# 
# Git 支持多种数据传输协议。上面的例子使用的是 `https://` 协议，不过你也可以使用 `git://` 协议或者 SSH 传输协议，比如 `user@server:path/to/repo.git`。

# In[ ]:




